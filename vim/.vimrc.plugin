"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=.//repos/github.com/Shougo/dein.vim

" Required:
call dein#begin(expand('./'))

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')

call dein#add('Shougo/unite.vim')
call dein#add('Shougo/neomru.vim')
call dein#add('Shougo/neocomplete')
call dein#add('Shougo/neosnippet')
call dein#add('Shougo/neosnippet-snippets')
call dein#add('honza/vim-snippets')
call dein#add('alpaca-tc/alpaca_powertabline')
call dein#add('https://github.com/Lokaltog/powerline.git')
call dein#add("godlygeek/tabular")
call dein#add("joker1007/vim-markdown-quote-syntax")
call dein#add("rcmdnk/vim-markdown")
call dein#add("Shougo/vimfiler")
call dein#add("Shougo/vimproc")
call dein#add('Yggdroot/indentLine')
call dein#add('mattn/emmet-vim')
call dein#add('tpope/vim-surround')
call dein#add('hail2u/vim-css3-syntax')
call dein#add('taichouchou2/vim-javascript')
call dein#add('kchmck/vim-coffee-script')
call dein#add('mattn/gist-vim', {'depends': 'mattn/webapi-vim'})
call dein#add('tpope/vim-fugitive')
call dein#add('tpope/vim-git')
call dein#add('cohama/agit.vim')
call dein#add('rhysd/committia.vim')
call dein#add('idanarye/vim-merginal')
call dein#add('gregsexton/gitv.git')
call dein#add('rking/ag.vim')
call dein#add('kannokanno/previm')
call dein#add('terryma/vim-expand-region')
call dein#add('vim-scripts/YankRing.vim')
call dein#add('easymotion/vim-easymotion')
call dein#add('nvie/vim-flake8')
call dein#add('stephpy/vim-php-cs-fixer')

" You can specify revision/branch/tag.
call dein#add('Shougo/vimshell', { 'rev': '3787e5' })

" Required:
call dein#end()

" Required:
filetype plugin indent on

" If you want to install not installed plugins on startup.
"if dein#check_install()
"  call dein#install()
"endif


"powerline用
set laststatus=2
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
let g:Powerline_symbols = 'on'


"mdプラグイン用
let g:vim_markdown_liquid=1
let g:vim_markdown_frontmatter=1
let g:vim_markdown_math=1
au BufRead,BufNewFile *.{txt,text,md} set filetype=markdown

" Plugin key-mappings.  " <C-k>でsnippetの展開
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" NeoSnippet用 他ファイル使用
let g:neosnippet#enable_snipmate_compatibility = 1

" NeoSnippet用 他ディレクトリ使用の際に追記
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'


"unite prefix key.
nnoremap [unite] <Nop>
nmap <Space>f [unite]

"unite general settings
"インサートモードで開始
let g:unite_enable_start_insert = 1
"最近開いたファイル履歴の保存数
let g:unite_source_file_mru_limit = 50000

"file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
let g:unite_source_file_mru_filename_format = ''

"現在開いているファイルのディレクトリ下のファイル一覧。
"開いていない場合はカレントディレクトリ
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"バッファ一覧
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
"レジスタ一覧
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
"最近使用したファイル一覧
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
"ブックマーク一覧
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
"ブックマークに追加
nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>
"uniteを開いている間のキーマッピング
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
"escでuniteを終了
  nmap <buffer> <esc> <plug>(unite_exit)
"入力モードのときjjでノーマルモードに移動
  imap <buffer> jj <plug>(unite_insert_leave)
"入力モードのときctrl+wでバックスラッシュも削除
  imap <buffer> <c-w> <plug>(unite_delete_backward_path)
"ctrl+jで縦に分割して開く
  nnoremap <silent> <buffer> <expr> <c-j> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <c-j> unite#do_action('split')
"ctrl+jで横に分割して開く
  nnoremap <silent> <buffer> <expr> <c-l> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <c-l> unite#do_action('vsplit')
"ctrl+oでその場所に開く
  nnoremap <silent> <buffer> <expr> <c-o> unite#do_action('open')
  inoremap <silent> <buffer> <expr> <c-o> unite#do_action('open')
"ctrl+tでその場所に開く
  nnoremap <silent> <buffer> <expr> <c-t> unite#do_action('tabopen')
  inoremap <silent> <buffer> <expr> <c-t> unite#do_action('tabopen')
endfunction"}}}

" indentLine用
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_leadingSpaceEnabled = 1

" previm用
let g:previm_open_cmd = 'open -a Google\ Chrome'
let g:previm_enable_realtime = 0
" デフォルトのCSSに加えて独自のCSSも適用する
"let g:previm_custom_css_path = '/Users/kanno/tmp/some.css'
nnoremap <Leader>p :PrevimOpen<CR>

" v連打で選択範囲を広げる
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1, 
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'ip'  :0,
      \ 'ie'  :0,
      \ }

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" 選択範囲にペーストできる
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()


" C-w から spaceへ
" let mapleader = "\<Space>"
"nnoremap [space] <Nop>
"nmap <space> [space]
nnoremap <Space>j <C-w>j
nnoremap <Space>k <C-w>k
nnoremap <Space>l <C-w>l
nnoremap <Space>h <C-w>h
nnoremap <Space>J <C-w>J
nnoremap <Space>K <C-w>K
nnoremap <Space>L <C-w>L
nnoremap <Space>H <C-w>H
nnoremap <Space>s :<C-u>sp<CR>
nnoremap <Space>v :<C-u>vs<CR>


" vimFilerをデフォルトファイラーに。
let g:vimfiler_as_default_explorer = 1

" vimFilerのセーフモードをoff
let g:vimfiler_safe_mode_by_default = 0

" vimFilerを開く時は必ず35のwidthで。
nnoremap <silent><Leader>fi :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>

" easy-motionの設定
" {{{
map <Leader> <Plug>(easymotion-prefix)
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
" }}}
